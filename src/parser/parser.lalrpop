use lalrpop_util::ParseError;
use std::str::FromStr;
use parser::parser_errors::ErrorType;
use ast::*;

grammar;

extern {
    type Error = (ErrorType, String, usize);
}

pub Program: Program = {
    <Def*> => Program(<>),
};

Def: Def = {
    <Type> <Identifier> "(" <List<Arg, ",">> ")" "{" <Stmt*> "}" => Def::DFun(<>),
};

List<T, Sep>: Vec<T> = {
    <ts: (<T> Sep)*> <t: T?> =>
        if let Some(t) = t {
            let mut ts = ts;
            ts.push(t);
            ts
        } else {
            ts
        },
};

Arg: Arg = {
    Type Identifier => Arg(<>),
};

pub Stmt: Stmt = {
    OpenStmt => <>,
    ClosedStmt => <>,
};

OpenStmt: Stmt = {
    "while" "(" <c: Expr> ")" <w: Stmt> => Stmt::SWhile(*c, Box::new(w)),
    "if" "(" <c: Expr> ")" <i: Stmt> => Stmt::SIf(*c, Box::new(i)),
    "if" "(" <c: Expr> ")" <i: ClosedStmt> "else" <e: OpenStmt> => Stmt::SIfElse(*c, Box::new(i), Box::new(e)),
};

ClosedStmt: Stmt = {
    ";" => Stmt::Empty,
    <Type> <List<Item, ","> >";" => Stmt::SDecl(<>),
    <i: Identifier> "=" <e: Expr> ";" => Stmt::SAss(i, *e),
    <Identifier> "++" ";" => Stmt::SInc(<>),
    <Identifier> "--" ";" => Stmt::SDecr(<>),
    "return" <Expr> ";" => Stmt::SRet(*<>),
    "return" ";" => Stmt::SVRet,
    <Expr> ";" => Stmt::SExpr(*<>),
    "{" <Stmt*> "}" => Stmt::SBlock(<>),
     "if" "(" <c: Expr> ")" <i: ClosedStmt> "else" <e: ClosedStmt> => Stmt::SIfElse(*c, Box::new(i), Box::new(e)),
};

Item: Item = {
    <i: Identifier> "=" <e: Expr> => Item::Init(i, *e),
    <Identifier> => Item::NoInit(<>),
};


//Block: Block = {
//    "{" <Stmt*> "}" => Block(<>),
//};


Predef: Predef = {
    "printInt" "(" <Expr> ")" => Predef::PrintInt(<>),
    "printString" "(" <Expr> ")" => Predef::PrintString(<>),
    "error" "(" ")" => Predef::Error,
    "readInt" "(" ")" => Predef::ReadInt,
    "readString" "(" ")" => Predef::ReadString,
};

Expr: Box<Expr> = {
    <e1: Expr1> "||" <e2: Expr> => Box::new(Expr::EOp(e1, BinOp::Or, e2)),
    Expr1,
};

Expr1: Box<Expr> = {
    <e1: Expr2> "&&" <e2: Expr1> => Box::new(Expr::EOp(e1, BinOp::And, e2)),
    Expr2,
};

Expr2: Box<Expr> = {
    Expr2 RelOp Expr3 => Box::new(Expr::EOp(<>)),
    Expr3,
};

Expr3: Box<Expr> = {
    Expr3 AddOp Expr4 => Box::new(Expr::EOp(<>)),
    Expr4,
};

Expr4: Box<Expr> = {
    Expr4 MulOp Expr5 => Box::new(Expr::EOp(<>)),
    Expr5,
};

Expr5: Box<Expr> = {
    "-" <Expr6> => Box::new(Expr::ENeg(<>)),
    "!" <Expr6> => Box::new(Expr::ENot(<>)),
    Expr6,
};

Expr6: Box<Expr> = {
    <Predef>  => Box::new(Expr::EPredef(<>)),
    Identifier => Box::new(Expr::EVar(<>)),
    Num => Box::new(Expr::EIntLit(<>)),
    Bool => Box::new(Expr::EBoolLit(<>)),
    String => Box::new(Expr::EStringLit(<>)),
    <i: Identifier> "(" <l: List<Expr, ",">> ")" =>
        Box::new(Expr::EApp(i, l.into_iter().map(|e| *e).collect::<Vec<Expr>>())),
    "(" <Expr> ")",
};

RelOp: BinOp = {
    "<" => BinOp::LT,
    "<=" => BinOp::LE,
    ">" => BinOp::GT,
    ">=" => BinOp::GE,
    "==" => BinOp::EQ,
    "!=" => BinOp::NEQ,
};

AddOp: BinOp = {
    "+" => BinOp::Add,
    "-" => BinOp::Sub,
};

MulOp: BinOp = {
    "*" => BinOp::Mul,
    "/" => BinOp::Div,
    "%" => BinOp::Mod,
};


Type: Type = {
    "int" => Type::TInt,
    "string" => Type::TString,
    "bool" => Type::TBool,
    "void" => Type::TVoid,
};

String: String = {
    r#""([^"]*)""# => {
      let mut res = String::new();
      for (i, c) in (<>).chars().enumerate() {
          if i > 0 && i < <>.len() - 1 {
              res.push(c);
          }
      }
      res
  },
};

Bool: bool = {
    "true" => true,
    "false" => false,
};

Identifier: String = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => <>.to_string()
};

Num: i32 = {
    <loc: @L> <num: r"[0-9]+"> =>? match i32::from_str(num) {
        Ok(i) => Ok(i),
        _ => Err(ParseError::User { error: (ErrorType::OverflowError, num.to_string(), loc) }),
    }
};